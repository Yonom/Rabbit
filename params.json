{"name":"Rabbit","tagline":"An EE library that simplifies multiple forms of authentication","body":"Rabbit\r\n======\r\n\r\n\r\nThis framework allows developers to have one unified authentication UI and one authentication method to authenticate multiple types of users. The authentication type is handled automatically, and a valid PlayerIOClient object is returned.\r\n\r\nRabbit currently supports ArmorGames, MouseBreaker*, Facebook and default authentication mechanisms.\r\n\r\n\r\nAdd Rabbit to your project:\r\n\r\n```csharp\r\nusing Rabbit;\r\nvar rabbitAuth = new Rabbit.Rabbit();\r\nvar Connection = rabbitAuth.LogIn(EmailOrToken, PasswordOrToken, RoomID);\r\n```\r\n\r\nNow, Connection is a valid PlayerIOClient connection. Remember to initialize it!\r\n\r\nRabbit is going to know what to set the mysterious block delay to, depending on your geographical region and internet speed so that you, as a developer, do not need to ask the user or make a guess.\r\n\r\n***Note:*** the MouseBreaker authentication pattern is very similar to ArmorGames and so may be difficult to decipher between them automatically.\r\n","google":"UA-53239844-1","note":"Don't delete this file! It's used internally to help with page regeneration."}